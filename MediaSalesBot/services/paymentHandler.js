const { products, paymentCards } = require('../config/products');
const orderManager = require('./orderManager');
const pdfGenerator = require('./pdfGenerator');

class PaymentHandler {
    constructor() {
        this.adminId = process.env.ADMIN_ID || ''; // Set admin Telegram ID
    }

    async processStarsPayment(ctx, productId, amount) {
        try {
            const product = products[productId];
            if (!product) {
                throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            const invoice = {
                title: product.name,
                description: product.description,
                payload: `product_${productId}`,
                provider_token: '', // Empty for Telegram Stars
                currency: 'XTR', // Telegram Stars currency
                prices: [{ label: product.name, amount: amount }]
            };

            await ctx.replyWithInvoice(invoice);
            return true;
        } catch (error) {
            console.error('Stars payment error:', error);
            return false;
        }
    }

    async processClickPayment(ctx, orderId) {
        const order = orderManager.getOrder(orderId);
        if (!order) {
            await ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const message = `
üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Click

üì¶ –ó–∞–∫–∞–∑ #${orderId}: ${order.product.name}
üí∞ –°—É–º–º–∞: ${order.product.price.toLocaleString()} ${order.product.currency}

üí≥ –ö–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:
‚Ä¢ Uzcard (–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è): ${paymentCards.uzcard_virtual}
‚Ä¢ Uzcard (—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è): ${paymentCards.uzcard_physical}

üìù –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç.
`;

        ctx.session.awaitingPaymentProof = orderId;
        await ctx.reply(message);
    }

    async processCardPayment(ctx, orderId) {
        const order = orderManager.getOrder(orderId);
        if (!order) {
            await ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        let cardNumber = paymentCards.uzcard_virtual;
        let additionalInfo = '';

        if (order.product.type === 'channel') {
            cardNumber = order.product.payment_card;
            additionalInfo = `\nüë§ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–∏—Å–∞—Ç—å: ${order.product.contact}`;
        }

        const message = `
üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π

üì¶ –ó–∞–∫–∞–∑ #${orderId}: ${order.product.name}
üí∞ –°—É–º–º–∞: ${order.product.price.toLocaleString()} ${order.product.currency}

üí≥ –ö–∞—Ä—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: ${cardNumber}${additionalInfo}

üìù –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç.
`;

        ctx.session.awaitingPaymentProof = orderId;
        await ctx.reply(message);
    }

    async handlePaymentProof(ctx, orderId) {
        const order = orderManager.getOrder(orderId);
        if (!order) {
            await ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // Mark order as paid and notify admin
        orderManager.markOrderAsPaid(orderId, { 
            proof: 'screenshot_provided',
            userId: ctx.from.id,
            username: ctx.from.username || 'Unknown'
        });

        await ctx.reply('‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω! –í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.');

        // Notify admin
        if (this.adminId) {
            try {
                const adminMessage = `
üîî –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞!

üì¶ –ó–∞–∫–∞–∑ #${orderId}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${ctx.from.username || 'Unknown'} (ID: ${ctx.from.id})
üõçÔ∏è –¢–æ–≤–∞—Ä: ${order.product.name}
üí∞ –°—É–º–º–∞: ${order.product.price.toLocaleString()} ${order.product.currency}
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ.
`;
                await ctx.telegram.sendMessage(this.adminId, adminMessage);
            } catch (error) {
                console.error('Failed to notify admin:', error);
            }
        }

        // Auto-deliver digital products
        if (order.product.type === 'digital') {
            await this.deliverDigitalProduct(ctx, order);
        }
    }

    async handleSuccessfulStarsPayment(ctx) {
        const payload = ctx.message.successful_payment.invoice_payload;
        const productId = parseInt(payload.replace('product_', ''));
        const product = products[productId];

        if (!product) {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // Create order
        const order = orderManager.createOrder(
            ctx.from.id,
            productId,
            product,
            'telegram_stars'
        );

        // Mark as paid
        orderManager.markOrderAsPaid(order.id, {
            telegram_payment_charge_id: ctx.message.successful_payment.telegram_payment_charge_id,
            provider_payment_charge_id: ctx.message.successful_payment.provider_payment_charge_id
        });

        await ctx.reply(`‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞! –ó–∞–∫–∞–∑ #${order.id}`);

        // Auto-deliver digital product
        if (product.type === 'digital') {
            await this.deliverDigitalProduct(ctx, order);
        }
    }

    async deliverDigitalProduct(ctx, order) {
        try {
            let filepath;
            
            switch (order.productId) {
                case 1: // Business plan
                    filepath = await pdfGenerator.generateBusinessPlan(order.id);
                    break;
                case 2: // Online business guide
                    filepath = await pdfGenerator.generateOnlineBusinessGuide(order.id);
                    break;
                case 3: // Sound pack
                    filepath = await pdfGenerator.generateSoundPack(order.id);
                    break;
                default:
                    throw new Error('Unknown digital product');
            }

            // Send file
            await ctx.replyWithDocument({ source: filepath });
            await ctx.reply('üìÅ –í–∞—à —Ñ–∞–π–ª –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ AVShop!');

            // Mark order as completed
            orderManager.markOrderAsCompleted(order.id);

            // Clean up file
            setTimeout(() => {
                pdfGenerator.cleanupFile(filepath);
            }, 60000); // Delete after 1 minute

        } catch (error) {
            console.error('Digital delivery error:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
        }
    }
}

module.exports = new PaymentHandler();
