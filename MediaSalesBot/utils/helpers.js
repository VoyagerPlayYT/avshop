const helpers = {
    getProductTypeText(type) {
        const types = {
            'digital': 'üíª –¶–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ–≤–∞—Ä',
            'physical': 'üì¶ –§–∏–∑–∏—á–µ—Å–∫–∏–π —Ç–æ–≤–∞—Ä',
            'channel': 'üì∫ Telegram-–∫–∞–Ω–∞–ª'
        };
        return types[type] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø';
    },

    getStatusEmoji(status) {
        const statuses = {
            'pending': '‚è≥',
            'paid': 'üí∞',
            'completed': '‚úÖ',
            'cancelled': '‚ùå',
            'processing': 'üîÑ'
        };
        return statuses[status] || '‚ùì';
    },

    formatPrice(price, currency) {
        if (currency === '—Å—É–º') {
            return `${price.toLocaleString()} ${currency}`;
        }
        return `${price}${currency}`;
    },

    formatDate(date) {
        return date.toLocaleString('ru-RU', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
    },

    generateOrderNumber() {
        const timestamp = Date.now().toString();
        const random = Math.random().toString(36).substring(2, 8);
        return `AVS${timestamp.slice(-6)}${random.toUpperCase()}`;
    },

    validateProductId(id) {
        const productId = parseInt(id);
        return !isNaN(productId) && productId >= 1 && productId <= 12;
    },

    escapeMarkdown(text) {
        return text.replace(/[_*[\]()~`>#+-=|{}.!]/g, '\\$&');
    },

    createPaginationKeyboard(currentPage, totalPages, callbackPrefix) {
        const buttons = [];
        
        if (currentPage > 1) {
            buttons.push(Markup.button.callback('‚¨ÖÔ∏è', `${callbackPrefix}_${currentPage - 1}`));
        }
        
        buttons.push(Markup.button.callback(`${currentPage}/${totalPages}`, 'noop'));
        
        if (currentPage < totalPages) {
            buttons.push(Markup.button.callback('‚û°Ô∏è', `${callbackPrefix}_${currentPage + 1}`));
        }
        
        return [buttons];
    },

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    },

    isValidPaymentMethod(method, productType) {
        const validMethods = ['click', 'card'];
        
        if (productType === 'digital') {
            validMethods.push('stars');
        }
        
        return validMethods.includes(method);
    },

    generatePaymentReference(orderId, method) {
        const timestamp = Date.now().toString(36);
        return `${method.toUpperCase()}_${orderId}_${timestamp}`;
    },

    calculateDeliveryTime(productType) {
        switch (productType) {
            case 'digital':
                return '–º–≥–Ω–æ–≤–µ–Ω–Ω–æ';
            case 'physical':
                return '1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è';
            case 'channel':
                return '–ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã';
            default:
                return '—É—Ç–æ—á–Ω—è–µ—Ç—Å—è';
        }
    }
};

module.exports = helpers;
