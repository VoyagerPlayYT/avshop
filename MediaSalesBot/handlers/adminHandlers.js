const { Markup } = require('telegraf');
const orderManager = require('../services/orderManager');
const helpers = require('../utils/helpers');

const ADMIN_PASSWORD = 'V0yageRpl@y2013@';

const adminHandlers = {
    async handleAdminAuth(ctx) {
        ctx.session.awaitingAdminPassword = true;
        await ctx.reply('üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:');
    },

    async handlePasswordInput(ctx) {
        const password = ctx.message.text;
        ctx.session.awaitingAdminPassword = false;

        if (password === ADMIN_PASSWORD) {
            ctx.session.isAdmin = true;
            await adminHandlers.showAdminPanel(ctx);
        } else {
            await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
        }
    },

    async showAdminPanel(ctx) {
        if (!ctx.session.isAdmin) {
            await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const stats = orderManager.getOrderStats();
        const message = `
üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ AVShop

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:
‚Ä¢ –í—Å–µ–≥–æ: ${stats.total}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç: ${stats.pending}
‚Ä¢ –û–ø–ª–∞—á–µ–Ω—ã: ${stats.paid}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω—ã: ${stats.completed}
‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω—ã: ${stats.cancelled}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
`;

        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üìã –í—Å–µ –∑–∞–∫–∞–∑—ã', 'admin_orders_all')],
            [Markup.button.callback('‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ', 'admin_orders_pending')],
            [Markup.button.callback('üí∞ –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ', 'admin_orders_paid')],
            [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')]
        ]);

        await ctx.reply(message, keyboard);
    },

    async handleAdminCallback(ctx) {
        if (!ctx.session.isAdmin) {
            await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const data = ctx.callbackQuery.data;
        const action = data.replace('admin_', '');

        switch (action) {
            case 'orders_all':
                await adminHandlers.showAllOrders(ctx);
                break;
            case 'orders_pending':
                await adminHandlers.showPendingOrders(ctx);
                break;
            case 'orders_paid':
                await adminHandlers.showPaidOrders(ctx);
                break;
            case 'stats':
                await adminHandlers.showDetailedStats(ctx);
                break;
        }
    },

    async showAllOrders(ctx) {
        const orders = orderManager.getAllOrders();
        
        if (orders.length === 0) {
            await ctx.reply('üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç');
            return;
        }

        let message = 'üìã –í—Å–µ –∑–∞–∫–∞–∑—ã:\n\n';
        
        orders.slice(0, 10).forEach(order => { // Show last 10 orders
            message += `üÜî #${order.id} | ${helpers.getStatusEmoji(order.status)} ${order.status}\n`;
            message += `üë§ ID: ${order.userId}\n`;
            message += `üõçÔ∏è ${order.product.name}\n`;
            message += `üí∞ ${order.product.price.toLocaleString()} ${order.product.currency}\n`;
            message += `‚è∞ ${order.createdAt.toLocaleString('ru-RU')}\n`;
            message += '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n';
        });

        if (orders.length > 10) {
            message += `\n... –∏ –µ—â–µ ${orders.length - 10} –∑–∞–∫–∞–∑–æ–≤`;
        }

        // Add order management buttons
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'admin_orders_all')],
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin_panel')]
        ]);

        await ctx.reply(message, keyboard);
    },

    async showPendingOrders(ctx) {
        const orders = orderManager.getPendingOrders();
        
        if (orders.length === 0) {
            await ctx.reply('‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤');
            return;
        }

        let message = '‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã:\n\n';
        
        orders.forEach(order => {
            message += `üÜî #${order.id} | ${helpers.getStatusEmoji(order.status)} ${order.status}\n`;
            message += `üë§ ID: ${order.userId}\n`;
            message += `üõçÔ∏è ${order.product.name}\n`;
            message += `üí∞ ${order.product.price.toLocaleString()} ${order.product.currency}\n`;
            message += `‚è∞ ${order.createdAt.toLocaleString('ru-RU')}\n`;
            
            // Add action buttons for each order
            const orderKeyboard = Markup.inlineKeyboard([
                [
                    Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `order_confirm_${order.id}`),
                    Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', `order_cancel_${order.id}`)
                ]
            ]);
            
            message += '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n';
        });

        await ctx.reply(message);
        
        // Show management buttons for pending orders
        const mainKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'admin_orders_pending')],
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin_panel')]
        ]);

        await ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏:', mainKeyboard);
    },

    async showPaidOrders(ctx) {
        const orders = orderManager.getAllOrders().filter(o => o.status === 'paid');
        
        if (orders.length === 0) {
            await ctx.reply('üí∞ –ù–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤');
            return;
        }

        let message = 'üí∞ –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n';
        
        orders.forEach(order => {
            message += `üÜî #${order.id}\n`;
            message += `üë§ ID: ${order.userId}\n`;
            message += `üõçÔ∏è ${order.product.name}\n`;
            message += `üí∞ ${order.product.price.toLocaleString()} ${order.product.currency}\n`;
            message += `‚è∞ ${order.paidAt?.toLocaleString('ru-RU') || 'N/A'}\n`;
            message += '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n';
        });

        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'admin_orders_paid')],
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin_panel')]
        ]);

        await ctx.reply(message, keyboard);
    },

    async showDetailedStats(ctx) {
        const orders = orderManager.getAllOrders();
        const stats = orderManager.getOrderStats();
        
        // Calculate revenue
        const revenue = {
            total: 0,
            byType: { digital: 0, physical: 0, channel: 0 },
            byCurrency: { —Å—É–º: 0, '$': 0 }
        };

        orders.filter(o => o.status === 'completed' || o.status === 'paid').forEach(order => {
            const price = order.product.price;
            const currency = order.product.currency;
            const type = order.product.type;
            
            revenue.byType[type] += price;
            revenue.byCurrency[currency] += price;
            
            if (currency === '—Å—É–º') {
                revenue.total += price;
            } else {
                revenue.total += price * 12000; // Approximate USD to UZS conversion
            }
        });

        const message = `
üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üìà –ó–∞–∫–∞–∑—ã:
‚Ä¢ –í—Å–µ–≥–æ: ${stats.total}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç: ${stats.pending}
‚Ä¢ –û–ø–ª–∞—á–µ–Ω—ã: ${stats.paid}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω—ã: ${stats.completed}
‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω—ã: ${stats.cancelled}

üí∞ –í—ã—Ä—É—á–∫–∞:
‚Ä¢ –û–±—â–∞—è: ~${revenue.total.toLocaleString()} —Å—É–º
‚Ä¢ –¶–∏—Ñ—Ä–æ–≤—ã–µ: ${revenue.byType.digital.toLocaleString()} —Å—É–º
‚Ä¢ –§–∏–∑–∏—á–µ—Å–∫–∏–µ: ${revenue.byType.physical.toLocaleString()} —Å—É–º
‚Ä¢ –ö–∞–Ω–∞–ª—ã: ${revenue.byType.channel}$

üìä –ü–æ –≤–∞–ª—é—Ç–∞–º:
‚Ä¢ –°—É–º: ${revenue.byCurrency['—Å—É–º'].toLocaleString()}
‚Ä¢ –î–æ–ª–ª–∞—Ä—ã: ${revenue.byCurrency['$']}$
`;

        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'admin_stats')],
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin_panel')]
        ]);

        await ctx.reply(message, keyboard);
    },

    async handleOrderCallback(ctx) {
        if (!ctx.session.isAdmin) {
            await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const data = ctx.callbackQuery.data;
        const [, action, orderId] = data.split('_');
        const order = orderManager.getOrder(parseInt(orderId));

        if (!order) {
            await ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        switch (action) {
            case 'confirm':
                orderManager.markOrderAsCompleted(parseInt(orderId));
                await ctx.reply(`‚úÖ –ó–∞–∫–∞–∑ #${orderId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
                
                // Notify customer
                try {
                    await ctx.telegram.sendMessage(
                        order.userId,
                        `‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #${orderId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n–¢–æ–≤–∞—Ä: ${order.product.name}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ AVShop!`
                    );
                } catch (error) {
                    console.error('Failed to notify customer:', error);
                }
                break;

            case 'cancel':
                orderManager.updateOrderStatus(parseInt(orderId), 'cancelled');
                await ctx.reply(`‚ùå –ó–∞–∫–∞–∑ #${orderId} –æ—Ç–º–µ–Ω–µ–Ω`);
                
                // Notify customer
                try {
                    await ctx.telegram.sendMessage(
                        order.userId,
                        `‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ #${orderId} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n\n–¢–æ–≤–∞—Ä: ${order.product.name}\n\n–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`
                    );
                } catch (error) {
                    console.error('Failed to notify customer:', error);
                }
                break;
        }
    }
};

module.exports = adminHandlers;
